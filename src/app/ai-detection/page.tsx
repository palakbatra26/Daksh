'use client';

import { useState } from 'react';
import { detectAIContent, AIDetectionResponse } from '@/lib/edenai';
import { Header } from '@/components/Header';
import { Footer } from '@/components/Footer';
import AIDetectionForm from './components/AIDetectionForm';
import AIDetectionResults from './components/AIDetectionResults';

export default function AIDetection() {
  const [isLoading, setIsLoading] = useState(false);
  const [text, setText] = useState('');
  const [results, setResults] = useState<AIDetectionResponse | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [useDemo, setUseDemo] = useState(false);
  const [apiUnavailable, setApiUnavailable] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    // Reset states
    setError(null);
    setResults(null);
    
    // Validate input
    if (!text.trim()) {
      setError('Please enter some text to analyze.');
      return;
    }

    const words = text.trim().split(/\s+/);
    if (words.length < 10) {
      setError('Please enter at least 10 words for accurate analysis.');
      return;
    }

    // Start loading
    setIsLoading(true);
    
    try {
      console.log('Starting AI detection analysis...');
      const data = await detectAIContent(text, useDemo || apiUnavailable);
      
      if (!data || !data.winstonai) {
        throw new Error('Invalid response format from the AI detection service.');
      }
      
      setResults(data);
      setError(null);
    } catch (err: unknown) {
      console.error('AI Detection Error:', err);
      
      const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred';
      
      if (errorMessage.includes('API credits exhausted') || errorMessage.includes('No more credits')) {
        setApiUnavailable(true);
        setError('The API is currently unavailable due to usage limits. Would you like to try the demo mode instead?');
      } else if (errorMessage.includes('length')) {
        setError('The text is too long. Please reduce the length and try again.');
      } else if (errorMessage.includes('rate limit')) {
        setError('Too many requests. Please try again in a few minutes.');
      } else {
        setError(errorMessage || 'An error occurred while analyzing the text. Please try again later.');
      }
      
      // Clear results if there's an error
      setResults(null);
    } finally {
      setIsLoading(false);
    }
  };

  // Function to switch to demo mode
  const enableDemoMode = () => {
    setUseDemo(true);
    setError(null);
  };

  return (
    <>
      <Header />
      <main className="min-h-screen bg-gradient-to-br from-blue-50 to-violet-50">
        <div className="max-w-7xl mx-auto px-4 py-12 sm:px-6 lg:px-8">
          <div className="text-center mb-12">
            <h1 className="text-4xl font-extrabold text-gray-900 sm:text-5xl">
              <span className="block">AI Content Detection</span>
              <span className="block  bg-gradient-to-r from-blue-600 to-violet-600 bg-clip-text text-transparent">Identify AI-Generated Text</span>
            </h1>
            <p className="mt-4 text-xl text-gray-600 max-w-3xl mx-auto">
              Paste any text to analyze whether it was written by a human or generated by AI.
              Our advanced algorithm provides detailed insights with high accuracy.
            </p>
            
            {useDemo && (
              <div className="mt-4 inline-flex items-center px-4 py-2 rounded-full bg-amber-100 text-amber-800 text-sm font-medium">
                <svg className="w-5 h-5 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                  <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                </svg>
                <span>Demo Mode Active - Using simulated AI detection results</span>
              </div>
            )}
          </div>

          <div className="bg-white rounded-xl shadow-xl overflow-hidden">
            <div className="p-6 sm:p-8">
              {apiUnavailable && !useDemo ? (
                <div className="mb-6 bg-amber-50 border-l-4 border-amber-400 p-4">
                  <div className="flex">
                    <div className="flex-shrink-0">
                      <svg className="h-5 w-5 text-amber-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                        <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                      </svg>
                    </div>
                    <div className="ml-3">
                      <p className="text-sm text-amber-700">
                        The API service has reached its usage limit. You can try the demo mode which uses simulated results.
                      </p>
                      <div className="mt-4">
                        <button 
                          onClick={enableDemoMode} 
                          className="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-amber-700 bg-amber-100 hover:bg-amber-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-amber-500"
                        >
                          Try Demo Mode
                        </button>
                      </div>
                    </div>
                  </div>
                </div>
              ) : (
                <>
                  <AIDetectionForm 
                    text={text} 
                    setText={setText} 
                    onSubmit={handleSubmit} 
                    isLoading={isLoading} 
                    error={error}
                  />
                  
                  {results && !isLoading && (
                    <AIDetectionResults results={results} isDemo={useDemo} />
                  )}
                </>
              )}
            </div>
          </div>

          <div className="mt-16 bg-white rounded-xl shadow-md p-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">
              How Our AI Detection Works
            </h2>
            <div className="grid md:grid-cols-3 gap-8">
              <div className="border border-gray-200 rounded-lg p-6">
                <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mb-4">
                  <svg className="w-6 h-6 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                  </svg>
                </div>
                <h3 className="text-lg font-medium text-gray-900 mb-2">Advanced Pattern Analysis</h3>
                <p className="text-gray-600">
                  Our system analyzes linguistic patterns, syntax, and semantic structures that differentiate 
                  AI-generated content from human writing.
                </p>
              </div>
              
              <div className="border border-gray-200 rounded-lg p-6">
                <div className="w-12 h-12 bg-violet-100 rounded-full flex items-center justify-center mb-4">
                  <svg className="w-6 h-6 text-violet-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
                  </svg>
                </div>
                <h3 className="text-lg font-medium text-gray-900 mb-2">Machine Learning Models</h3>
                <p className="text-gray-600">
                  Powered by state-of-the-art machine learning algorithms trained on millions of examples
                  of both human-written and AI-generated text.
                </p>
              </div>
              
              <div className="border border-gray-200 rounded-lg p-6">
                <div className="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mb-4">
                  <svg className="w-6 h-6 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 3.055A9.001 9.001 0 1020.945 13H11V3.055z" />
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20.488 9H15V3.512A9.025 9.025 0 0120.488 9z" />
                  </svg>
                </div>
                <h3 className="text-lg font-medium text-gray-900 mb-2">Detailed Scoring</h3>
                <p className="text-gray-600">
                  Provides probabilistic scores and detailed analysis of text segments,
                  helping you understand exactly which parts may be AI-generated.
                </p>
              </div>
            </div>
          </div>
        </div>
      </main>
      <Footer />
    </>
  );
} 